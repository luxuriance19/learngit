git checkout -- file (工作区退回)
git add file(工作区到缓存区)
git commit -m ""(message 写入)
git reset HEAD file (工作区退回)
git reset HEAD^ (缓存区退回, HEAD^^退回到之前两次操作前,也就是commit两次前, HEAD~100,退回到前100次)
这里git reset --hard *****可以回退到置零未知
git log(查看log,但是退回的后面的不可见)
git log --pretty=oneline
git reflog(所有的修改的记录)
git rm (移除文件,工作区和缓存区,除非用reset退回到原来的状态,否则不可逆)
git diff (查看文件的改动)
git status查看仓库当前的状态
git init(初始化git的仓库)

git push -u ** master

###创建分支
git checkout -b dev  #创建并切换到dev分支 -b表示切换的意思
上面的命令相当于
git branch dev
git checkout dev

git branch 命令可以查看分支,当前分支前面会有一个*
git checkout master 切换到master分治
git merge dev #合并分支成果到master上面
git branch -d dev #删除dev分支

git branch <name> 创建分治
git checkout <name> 切换分治
git checkout -b <name> 查看创建分支
git merge <name> 合并分支
git branch -d 删除分支

当合并有冲突的时候git会把有冲突的两部分显示,必须手动调整
git log --graph # 可以看到分支合并图

合并分治的fast forward的模式,在删除分支之后就会丢失分支的信息,
禁用fast forward的模式,在merge的时候会生成一个新的commit.
--no-ff的方式进行git merge的时候会生成一个新的commit
e.g.
git merge --no-ff -m "merge with no-ff" dev

git log --graph --pretty=oneline --abbrev-commit

stash 功能
当一个分支工作没有完,需要进行下一个工作的时候
git stash
git stash list #查看工作现场
stash工作现场的内容发现
1, git stash pop 恢复的同时把stash的内容删除
2, git stash apply, 恢复之后不善除,调用 git stash drop删除内容

多次stash的时候,利用git stash apply stash@{#} #表示恢复的stash的编号.

没有合并过的分支需要强制删除 -D采用大D
git branch -D <name>

查看远程库的信息:
git remote
显示详细信息:
git remote -v

多人协作
推送子集的修改: git push origin <branch-name> 
推送失败,远程比本地新:git pull 合并
合并冲突,解决冲突本地提交
冲突解决 git push origin <branch-name>
git pull提示 no tracking information (git pull <remote> <branch>)
进行设置 git branch --set-upstream-to <branch-name> origin/<branch-name>

本地创建和远程对应的分支: git checkout -b branch-name origin/branch-name


git rebase: 可以将本地未push的分叉提交历史整理成一条直线.

标签管理:这里对标签做相应的管理工作
git tag <name>就可以为当前分治大一个新的标签
git tag 可以查看所有的标签.
git tag <name> <commit_id> 给之前的某次提交打上一个标签
标签的输出是按照字母序进行显示
git show <tagname> 查看标签的详细信息
标签是和commit有关的,如果一个commit出现在多个分支上面,那么这些分支都会带有这个标签.
git tag -a <tagname> -m "..."可以指定标签信息.

git push origin <tagname> 推送一个本地标签
git push origin --tags 推送未推送的本地标签
git tag -d <tagname> 删除一个本地标签
git push origin :refs/tags/<tagname> 删除一个远程标签鞍,注意冒号前面的空格不能省略
git push origin :to-del-branch
git push origin :<branch>/<tag>
tag是全局的tag,不是针对某一个分支的,而是针对某一个commit_id的.

git config --global color.ui true 让Git显示颜色
git config --global user.name "name"
git config --global user.email "email" 配置name和email

git忽略特殊文件
.gitignore 里面汉的文件名都会忽略,里面本身已经定义了一些规则
当无法在git当中添加文件时,可以用-f强制
git add -f <name>
git check-ignore -v <name> 检查gitignore当中哪个规则导致忽略<name>的问题

配置别名
git config --global alias.st status staus的别名为st
git config --global alias.co checkout checkout的别名为co
--global 表示全局参数,表明此电脑的所有git仓库都有小

git reset HEAD file表明unstage的操作,也就是把缓存区(暂存取)的修改撤销掉
配置别名 git config --global alias.unstage 'reset HEAD'
git config --global alias.last 'log -l'显示最后一次提交的信息,别名设计为last

--global 针对的是当前用户,如果不加就只对本地仓库有作用
每个仓库当好总的配置文件多放在了.git/config当中

查看用户的配置信息 
git config --global --list 全局
git config --local --list本地
local的在.git/config中,global的在用户主目录下面的.gitconfig中

创建git服务器
adduser git 创建git用户
收集公钥(id_rsa.pub), 放入(/home/git/.ssh/authorized_keys)
git init --bare sample.git 选定一个目录作为Git仓库/srv/sample.git,srv下面输入该命令,建立裸仓库,裸仓库没有工作区
chown -R git:git sample.git 把owner改为git,并且不让用户直接修改工作区
禁用shell登录
将/etc/passwd中的
git:x:1001:1001:,,,:/home/git:bin/bash改为git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
克隆仓库 
git clone git@server:srv/sample.git
